"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyEmail = exports.isFreeEmail = exports.isDisposableEmail = void 0;
const smtp_1 = require("./smtp");
const dns_1 = require("./dns");
const validator_1 = require("./validator");
let disposableEmailProviders;
let freeEmailProviders;
function isDisposableEmail(emailOrDomain) {
    let [_, emailDomain] = emailOrDomain === null || emailOrDomain === void 0 ? void 0 : emailOrDomain.split('@');
    if (!emailDomain) {
        emailDomain = _;
    }
    if (!emailDomain) {
        return false;
    }
    if (!disposableEmailProviders) {
        disposableEmailProviders = require('./disposable-email-providers.json');
    }
    return emailDomain && disposableEmailProviders.includes(emailDomain);
}
exports.isDisposableEmail = isDisposableEmail;
function isFreeEmail(emailOrDomain) {
    let [_, emailDomain] = emailOrDomain === null || emailOrDomain === void 0 ? void 0 : emailOrDomain.split('@');
    if (!emailDomain) {
        emailDomain = _;
    }
    if (!emailDomain) {
        return false;
    }
    if (!freeEmailProviders) {
        freeEmailProviders = require('./free-email-providers.json');
    }
    return emailDomain && freeEmailProviders.includes(emailDomain);
}
exports.isFreeEmail = isFreeEmail;
const logMethod = console.debug;
async function verifyEmail(params) {
    const { emailAddress, timeout = 4000, verifyMx = false, verifySmtp = false, debug = false, smtpPort = 25 } = params;
    const result = { validFormat: false, validMx: null, validSmtp: null };
    const log = debug ? logMethod : (...args) => { };
    let mxRecords;
    if (!(0, validator_1.isValidEmail)(emailAddress)) {
        log('Failed on wellFormed check');
        return result;
    }
    const [local, domain] = emailAddress.split('@');
    if (!domain) {
        log('Failed on wellFormed check');
        return result;
    }
    result.validFormat = true;
    // save a DNS call
    if (!verifyMx && !verifySmtp)
        return result;
    try {
        mxRecords = await (0, dns_1.resolveMxRecords)(domain);
        log('Found MX records', mxRecords);
    }
    catch (err) {
        log('Failed to resolve MX records', err);
        mxRecords = [];
    }
    if (verifyMx || verifySmtp) {
        result.validMx = mxRecords && mxRecords.length > 0;
    }
    if (verifySmtp) {
        result.validSmtp = await (0, smtp_1.verifyMailboxSMTP)({
            local,
            domain,
            mxRecords,
            timeout,
            debug,
            port: smtpPort,
        });
    }
    return result;
}
exports.verifyEmail = verifyEmail;
